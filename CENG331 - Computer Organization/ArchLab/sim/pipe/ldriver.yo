                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f46808000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6e805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7d803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # ALPER KOCAMAN
                            | # e2169589
                            | # Describe how and why you modified the baseline code.
                            | #
                            | #In this program,in order not to use unnecessary jump instruction , I copied code blocks in place of jump instructions.
                            | #Also,this program uses iaddq operation,which is better than moving an immediate value to register and move that ragister value
                            | #to another register.
                            | #1-In order to use jump instructions with conditions such as jl or jle after than iaddq operation,
                            | #iaddq operation should set condition codes.Thus, in the pipe-full.hcl, condition codes are implemented for the iaddq operation.
                            | #2-This ncopy function uses loop unrolling.In the given version,loop takes one element per iteration and copy it to the destination.
                            | #In this version,firstly number of elements that will be copied is checked.If it is bigger than or equal to 8,8 element is taken in that 
                            | #iteration and copied to the requested destination .
                            | #3-After the loop,(n mod 8) elements are remaining where n describes the total number of elements.(namely,possibilities are 0,1,2,3,4,5,6,7)
                            | #4-Function checks the number of remaining elements,if it is greater or equal to 4,take these elements in a one pass(not in a loop),
                            | #and copy them to the destination.
                            | #5-If the above check is true,than number of remaining elements(4,5,6,7) are become (0,1,2,3). 
                            | #6-If the above check is false,namely number of remaining elements are less than 4 ,than this numbers can be (0.1.2.3) as well.
                            | #7-Now,function takes 2 elements if exist,namely remaining elements are 2 or 3.After this operation,0 or 1 element can remain.
                            | #8-If there are no 2 elements remaining in %rdi,remaining number of elements are 0 or 1.
                            | #9-Check if there exists an element in %rdi.If so,take it ,copy it to the destination and halt the program.
                            | #10-If not exists,halt the program.     
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 	
0x032: c0f2f8ffffffffffffff | 	iaddq $-8,%rdx 
0x03c: 72b401000000000000   | 	jl    try4
                            | 
0x045:                      | Loop_with_8:
                            | 
0x045: 50170000000000000000 | 	mrmovq (%rdi), %rcx	
0x04f: 50870800000000000000 | 	mrmovq 8(%rdi), %r8	
0x059: 50971000000000000000 | 	mrmovq 16(%rdi), %r9	
0x063: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10	
0x06d: 50b72000000000000000 | 	mrmovq 32(%rdi), %r11	
0x077: 50c72800000000000000 | 	mrmovq 40(%rdi), %r12	
0x081: 50d73000000000000000 | 	mrmovq 48(%rdi), %r13	
0x08b: 50e73800000000000000 | 	mrmovq 56(%rdi), %r14	
0x095: 40160000000000000000 | 	rmmovq %rcx, (%rsi)	
0x09f: 40860800000000000000 | 	rmmovq %r8, 8(%rsi)	
0x0a9: 40961000000000000000 | 	rmmovq %r9, 16(%rsi)	
0x0b3: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)	
0x0bd: 40b62000000000000000 | 	rmmovq %r11, 32(%rsi)	
0x0c7: 40c62800000000000000 | 	rmmovq %r12, 40(%rsi)	
0x0d1: 40d63000000000000000 | 	rmmovq %r13, 48(%rsi)	
0x0db: 40e63800000000000000 | 	rmmovq %r14, 56(%rsi)	
0x0e5: 6211                 | 	andq %rcx,%rcx
0x0e7: 71fa00000000000000   | 	jle  N1
0x0f0: c0f00100000000000000 | 	iaddq $1,%rax
                            | 
0x0fa:                      | N1:
                            | 
0x0fa: 6288                 | 	andq %r8,%r8
0x0fc: 710f01000000000000   | 	jle N2
0x105: c0f00100000000000000 | 	iaddq $1,%rax
                            | 
0x10f:                      | N2:
                            | 
0x10f: 6299                 | 	andq %r9,%r9
0x111: 712401000000000000   | 	jle N3
0x11a: c0f00100000000000000 | 	iaddq $1,%rax
                            | 
0x124:                      | N3:
                            | 
0x124: 62aa                 | 	andq %r10,%r10
0x126: 713901000000000000   | 	jle N4
0x12f: c0f00100000000000000 | 	iaddq $1,%rax
                            | 
0x139:                      | N4:
                            | 
0x139: 62bb                 | 	andq %r11,%r11
0x13b: 714e01000000000000   | 	jle N5
0x144: c0f00100000000000000 | 	iaddq $1,%rax
                            | 
0x14e:                      | N5:
                            | 
0x14e: 62cc                 | 	andq %r12,%r12
0x150: 716301000000000000   | 	jle N6
0x159: c0f00100000000000000 | 	iaddq $1,%rax
                            | 
0x163:                      | N6:
                            | 
0x163: 62dd                 | 	andq %r13,%r13
0x165: 717801000000000000   | 	jle N7
0x16e: c0f00100000000000000 | 	iaddq $1,%rax
                            | 
0x178:                      | N7:
                            | 
0x178: 62ee                 | 	andq %r14,%r14
0x17a: 718d01000000000000   | 	jle loop_test
0x183: c0f00100000000000000 | 	iaddq $1,%rax
                            | 
0x18d:                      | loop_test:
                            | 
0x18d: c0f74000000000000000 | 	iaddq $64,%rdi
0x197: c0f64000000000000000 | 	iaddq $64,%rsi
0x1a1: c0f2f8ffffffffffffff | 	iaddq $-8,%rdx
0x1ab: 754500000000000000   | 	jge Loop_with_8	
                            | 
0x1b4:                      | try4:
                            | 
0x1b4: c0f20400000000000000 | 	iaddq $4,%rdx
0x1be: 720c03000000000000   | 	jl less_than4
                            | 
0x1c7:                      | pass_for4elements:
                            | 
0x1c7: 50170000000000000000 | 	mrmovq (%rdi), %rcx
0x1d1: 50870800000000000000 | 	mrmovq 8(%rdi), %r8	
0x1db: 50971000000000000000 | 	mrmovq 16(%rdi), %r9	
0x1e5: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10
0x1ef: 40160000000000000000 | 	rmmovq %rcx, (%rsi)	
0x1f9: 40860800000000000000 | 	rmmovq %r8, 8(%rsi)	
0x203: 40961000000000000000 | 	rmmovq %r9, 16(%rsi)	
0x20d: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)
0x217: 6211                 | 	andq %rcx,%rcx
0x219: 712c02000000000000   | 	jle  N8
0x222: c0f00100000000000000 | 	iaddq $1,%rax
                            | 
0x22c:                      | N8:
                            | 
0x22c: 6288                 | 	andq %r8,%r8
0x22e: 714102000000000000   | 	jle N9
0x237: c0f00100000000000000 | 	iaddq $1,%rax
                            | 
0x241:                      | N9:
                            | 
0x241: 6299                 | 	andq %r9,%r9
0x243: 715602000000000000   | 	jle N10
0x24c: c0f00100000000000000 | 	iaddq $1,%rax
                            | 
0x256:                      | N10:
                            | 
0x256: 62aa                 | 	andq %r10,%r10
0x258: 716b02000000000000   | 	jle pass_for2_elements
0x261: c0f00100000000000000 | 	iaddq $1,%rax
                            | 
0x26b:                      | pass_for2_elements:
                            | 
0x26b: c0f72000000000000000 | 	iaddq $32,%rdi
0x275: c0f62000000000000000 | 	iaddq $32,%rsi
0x27f: c0f2feffffffffffffff | 	iaddq $-2,%rdx
0x289: 729903000000000000   | 	jl less_than2
0x292: 50170000000000000000 | 	mrmovq (%rdi), %rcx
0x29c: 50870800000000000000 | 	mrmovq 8(%rdi), %r8	
0x2a6: 40160000000000000000 | 	rmmovq %rcx, (%rsi)	
0x2b0: 40860800000000000000 | 	rmmovq %r8, 8(%rsi)	
0x2ba: 6211                 | 	andq %rcx,%rcx
0x2bc: 71cf02000000000000   | 	jle  N12
0x2c5: c0f00100000000000000 | 	iaddq $1,%rax
                            | 
0x2cf:                      | N12:
                            | 
0x2cf: 6288                 | 	andq %r8,%r8
0x2d1: 71e402000000000000   | 	jle test4
0x2da: c0f00100000000000000 | 	iaddq $1,%rax
                            | 
0x2e4:                      | test4:
                            | 
0x2e4: c0f71000000000000000 | 	iaddq $16,%rdi
0x2ee: c0f61000000000000000 | 	iaddq $16,%rsi
0x2f8: c0f2ffffffffffffffff | 	iaddq $-1,%rdx
0x302: 75ad03000000000000   | 	jge try1
0x30b: 90                   | 	ret
                            | 
0x30c:                      | less_than4:
                            | 
0x30c: c0f20200000000000000 | 	iaddq $2,%rdx
0x316: 729903000000000000   | 	jl less_than2
                            | 		
0x31f:                      | try2:
                            | 	
0x31f: 50170000000000000000 | 	mrmovq (%rdi), %rcx
0x329: 50870800000000000000 | 	mrmovq 8(%rdi), %r8	
0x333: 40160000000000000000 | 	rmmovq %rcx, (%rsi)	
0x33d: 40860800000000000000 | 	rmmovq %r8, 8(%rsi)	
0x347: 6211                 | 	andq %rcx,%rcx
0x349: 715c03000000000000   | 	jle  N11
0x352: c0f00100000000000000 | 	iaddq $1,%rax
                            | 
0x35c:                      | N11:
                            | 
0x35c: 6288                 | 	andq %r8,%r8
0x35e: 717103000000000000   | 	jle test3
0x367: c0f00100000000000000 | 	iaddq $1,%rax
                            | 
0x371:                      | test3:
                            | 
0x371: c0f71000000000000000 | 	iaddq $16,%rdi
0x37b: c0f61000000000000000 | 	iaddq $16,%rsi
0x385: c0f2ffffffffffffffff | 	iaddq $-1,%rdx
0x38f: 75ad03000000000000   | 	jge try1
0x398: 90                   | 	ret
                            | 
0x399:                      | less_than2:
                            | 
0x399: c0f20100000000000000 | 	iaddq $1,%rdx
0x3a3: 75ad03000000000000   | 	jge try1
0x3ac: 90                   | 	ret
                            | 
0x3ad:                      | try1:
                            | 
0x3ad: 50170000000000000000 | 	mrmovq (%rdi), %rcx	
0x3b7: 40160000000000000000 | 	rmmovq %rcx, (%rsi)		
0x3c1: 6211                 | 	andq %rcx,%rcx
0x3c3: 71d603000000000000   | 	jle  Done
0x3cc: c0f00100000000000000 | 	iaddq $1,%rax	
                            | 	
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3d6:                      | Done:
0x3d6: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3d7:                      | End:
                            | #/* $end ncopy-ys */
0x3d7:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x3d8:                      | 	.align 8
0x3d8:                      | src:
0x3d8: ffffffffffffffff     | 	.quad -1
0x3e0: feffffffffffffff     | 	.quad -2
0x3e8: 0300000000000000     | 	.quad 3
0x3f0: fcffffffffffffff     | 	.quad -4
0x3f8: fbffffffffffffff     | 	.quad -5
0x400: 0600000000000000     | 	.quad 6
0x408: 0700000000000000     | 	.quad 7
0x410: f8ffffffffffffff     | 	.quad -8
0x418: 0900000000000000     | 	.quad 9
0x420: 0a00000000000000     | 	.quad 10
0x428: f5ffffffffffffff     | 	.quad -11
0x430: f4ffffffffffffff     | 	.quad -12
0x438: 0d00000000000000     | 	.quad 13
0x440: f2ffffffffffffff     | 	.quad -14
0x448: f1ffffffffffffff     | 	.quad -15
0x450: 1000000000000000     | 	.quad 16
0x458: 1100000000000000     | 	.quad 17
0x460: 1200000000000000     | 	.quad 18
0x468: edffffffffffffff     | 	.quad -19
0x470: ecffffffffffffff     | 	.quad -20
0x478: 1500000000000000     | 	.quad 21
0x480: eaffffffffffffff     | 	.quad -22
0x488: e9ffffffffffffff     | 	.quad -23
0x490: 1800000000000000     | 	.quad 24
0x498: 1900000000000000     | 	.quad 25
0x4a0: 1a00000000000000     | 	.quad 26
0x4a8: 1b00000000000000     | 	.quad 27
0x4b0: e4ffffffffffffff     | 	.quad -28
0x4b8: e3ffffffffffffff     | 	.quad -29
0x4c0: e2ffffffffffffff     | 	.quad -30
0x4c8: 1f00000000000000     | 	.quad 31
0x4d0: e0ffffffffffffff     | 	.quad -32
0x4d8: 2100000000000000     | 	.quad 33
0x4e0: deffffffffffffff     | 	.quad -34
0x4e8: 2300000000000000     | 	.quad 35
0x4f0: 2400000000000000     | 	.quad 36
0x4f8: dbffffffffffffff     | 	.quad -37
0x500: 2600000000000000     | 	.quad 38
0x508: d9ffffffffffffff     | 	.quad -39
0x510: 2800000000000000     | 	.quad 40
0x518: 2900000000000000     | 	.quad 41
0x520: d6ffffffffffffff     | 	.quad -42
0x528: 2b00000000000000     | 	.quad 43
0x530: d4ffffffffffffff     | 	.quad -44
0x538: 2d00000000000000     | 	.quad 45
0x540: d2ffffffffffffff     | 	.quad -46
0x548: d1ffffffffffffff     | 	.quad -47
0x550: d0ffffffffffffff     | 	.quad -48
0x558: 3100000000000000     | 	.quad 49
0x560: ceffffffffffffff     | 	.quad -50
0x568: cdffffffffffffff     | 	.quad -51
0x570: 3400000000000000     | 	.quad 52
0x578: 3500000000000000     | 	.quad 53
0x580: 3600000000000000     | 	.quad 54
0x588: 3700000000000000     | 	.quad 55
0x590: 3800000000000000     | 	.quad 56
0x598: c7ffffffffffffff     | 	.quad -57
0x5a0: c6ffffffffffffff     | 	.quad -58
0x5a8: c5ffffffffffffff     | 	.quad -59
0x5b0: c4ffffffffffffff     | 	.quad -60
0x5b8: c3ffffffffffffff     | 	.quad -61
0x5c0: 3e00000000000000     | 	.quad 62
0x5c8: 3f00000000000000     | 	.quad 63
0x5d0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x5e0:                      | 	.align 16
0x5e0:                      | Predest:
0x5e0: fadebc0000000000     | 	.quad 0xbcdefa
0x5e8:                      | dest:
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0: abefcd0000000000     | 	.quad 0xcdefab
0x7a8: abefcd0000000000     | 	.quad 0xcdefab
0x7b0: abefcd0000000000     | 	.quad 0xcdefab
0x7b8: abefcd0000000000     | 	.quad 0xcdefab
0x7c0: abefcd0000000000     | 	.quad 0xcdefab
0x7c8: abefcd0000000000     | 	.quad 0xcdefab
0x7d0: abefcd0000000000     | 	.quad 0xcdefab
0x7d8: abefcd0000000000     | 	.quad 0xcdefab
0x7e0:                      | Postdest:
0x7e0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x7e8:                      | .align 8
                            | # Run time stack
0x7e8: 0000000000000000     | 	.quad 0
0x7f0: 0000000000000000     | 	.quad 0
0x7f8: 0000000000000000     | 	.quad 0
0x800: 0000000000000000     | 	.quad 0
0x808: 0000000000000000     | 	.quad 0
0x810: 0000000000000000     | 	.quad 0
0x818: 0000000000000000     | 	.quad 0
0x820: 0000000000000000     | 	.quad 0
0x828: 0000000000000000     | 	.quad 0
0x830: 0000000000000000     | 	.quad 0
0x838: 0000000000000000     | 	.quad 0
0x840: 0000000000000000     | 	.quad 0
0x848: 0000000000000000     | 	.quad 0
0x850: 0000000000000000     | 	.quad 0
0x858: 0000000000000000     | 	.quad 0
0x860: 0000000000000000     | 	.quad 0
                            | 
0x868:                      | Stack:
