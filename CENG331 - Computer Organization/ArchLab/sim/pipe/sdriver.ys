#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# ALPER KOCAMAN
# e2169589
# Describe how and why you modified the baseline code.
#
#In this program,in order not to use unnecessary jump instruction , I copied code blocks in place of jump instructions.
#Also,this program uses iaddq operation,which is better than moving an immediate value to register and move that ragister value
#to another register.
#1-In order to use jump instructions with conditions such as jl or jle after than iaddq operation,
#iaddq operation should set condition codes.Thus, in the pipe-full.hcl, condition codes are implemented for the iaddq operation.
#2-This ncopy function uses loop unrolling.In the given version,loop takes one element per iteration and copy it to the destination.
#In this version,firstly number of elements that will be copied is checked.If it is bigger than or equal to 8,8 element is taken in that 
#iteration and copied to the requested destination .
#3-After the loop,(n mod 8) elements are remaining where n describes the total number of elements.(namely,possibilities are 0,1,2,3,4,5,6,7)
#4-Function checks the number of remaining elements,if it is greater or equal to 4,take these elements in a one pass(not in a loop),
#and copy them to the destination.
#5-If the above check is true,than number of remaining elements(4,5,6,7) are become (0,1,2,3). 
#6-If the above check is false,namely number of remaining elements are less than 4 ,than this numbers can be (0.1.2.3) as well.
#7-Now,function takes 2 elements if exist,namely remaining elements are 2 or 3.After this operation,0 or 1 element can remain.
#8-If there are no 2 elements remaining in %rdi,remaining number of elements are 0 or 1.
#9-Check if there exists an element in %rdi.If so,take it ,copy it to the destination and halt the program.
#10-If not exists,halt the program.     
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	
	iaddq $-8,%rdx 
	jl    try4

Loop_with_8:

	mrmovq (%rdi), %rcx	
	mrmovq 8(%rdi), %r8	
	mrmovq 16(%rdi), %r9	
	mrmovq 24(%rdi), %r10	
	mrmovq 32(%rdi), %r11	
	mrmovq 40(%rdi), %r12	
	mrmovq 48(%rdi), %r13	
	mrmovq 56(%rdi), %r14	
	rmmovq %rcx, (%rsi)	
	rmmovq %r8, 8(%rsi)	
	rmmovq %r9, 16(%rsi)	
	rmmovq %r10, 24(%rsi)	
	rmmovq %r11, 32(%rsi)	
	rmmovq %r12, 40(%rsi)	
	rmmovq %r13, 48(%rsi)	
	rmmovq %r14, 56(%rsi)	
	andq %rcx,%rcx
	jle  N1
	iaddq $1,%rax

N1:

	andq %r8,%r8
	jle N2
	iaddq $1,%rax

N2:

	andq %r9,%r9
	jle N3
	iaddq $1,%rax

N3:

	andq %r10,%r10
	jle N4
	iaddq $1,%rax

N4:

	andq %r11,%r11
	jle N5
	iaddq $1,%rax

N5:

	andq %r12,%r12
	jle N6
	iaddq $1,%rax

N6:

	andq %r13,%r13
	jle N7
	iaddq $1,%rax

N7:

	andq %r14,%r14
	jle loop_test
	iaddq $1,%rax

loop_test:

	iaddq $64,%rdi
	iaddq $64,%rsi
	iaddq $-8,%rdx
	jge Loop_with_8	

try4:

	iaddq $4,%rdx
	jl less_than4

pass_for4elements:

	mrmovq (%rdi), %rcx
	mrmovq 8(%rdi), %r8	
	mrmovq 16(%rdi), %r9	
	mrmovq 24(%rdi), %r10
	rmmovq %rcx, (%rsi)	
	rmmovq %r8, 8(%rsi)	
	rmmovq %r9, 16(%rsi)	
	rmmovq %r10, 24(%rsi)
	andq %rcx,%rcx
	jle  N8
	iaddq $1,%rax

N8:

	andq %r8,%r8
	jle N9
	iaddq $1,%rax

N9:

	andq %r9,%r9
	jle N10
	iaddq $1,%rax

N10:

	andq %r10,%r10
	jle pass_for2_elements
	iaddq $1,%rax

pass_for2_elements:

	iaddq $32,%rdi
	iaddq $32,%rsi
	iaddq $-2,%rdx
	jl less_than2
	mrmovq (%rdi), %rcx
	mrmovq 8(%rdi), %r8	
	rmmovq %rcx, (%rsi)	
	rmmovq %r8, 8(%rsi)	
	andq %rcx,%rcx
	jle  N12
	iaddq $1,%rax

N12:

	andq %r8,%r8
	jle test4
	iaddq $1,%rax

test4:

	iaddq $16,%rdi
	iaddq $16,%rsi
	iaddq $-1,%rdx
	jge try1
	ret

less_than4:

	iaddq $2,%rdx
	jl less_than2
		
try2:
	
	mrmovq (%rdi), %rcx
	mrmovq 8(%rdi), %r8	
	rmmovq %rcx, (%rsi)	
	rmmovq %r8, 8(%rsi)	
	andq %rcx,%rcx
	jle  N11
	iaddq $1,%rax

N11:

	andq %r8,%r8
	jle test3
	iaddq $1,%rax

test3:

	iaddq $16,%rdi
	iaddq $16,%rsi
	iaddq $-1,%rdx
	jge try1
	ret

less_than2:

	iaddq $1,%rdx
	jge try1
	ret

try1:

	mrmovq (%rdi), %rcx	
	rmmovq %rcx, (%rsi)		
	andq %rcx,%rcx
	jle  Done
	iaddq $1,%rax	
	
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad -2
	.quad -3
	.quad 4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
