# ALPER KOCAMAN
# e2169589

# Execution begins at address 0 
	.pos 0 
	irmovq stack, %rsp  	# Set up stack pointer  
	call main		# Execute main program
	halt			# Terminate program 

# Sample linked list
	.align 8
ele1:
	.quad 0x00a
	.quad ele2

ele2:
	.quad 0x0b0
	.quad ele3

ele3:
	.quad 0xc00
	.quad 0

main:

	irmovq ele1,%rdi	
	call rsum_list		# rsum_list(ele1)
	ret

# long rsum_list(list_ptr ls)
# ele1 in %rdi, val in %rax

rsum_list:

	xorq %rax,%rax		# Set val to 0
	andq %rdi,%rdi		# if(ele1 == 0)
	je     return		# If ele1 == 0, return 0
	pushq %rbx		    # Save callee-saved register
	mrmovq (%rdi),%rbx	# Get ele1
	mrmovq 8(%rdi),%rdi          
	call rsum_list
	addq %rbx,%rax      # Add val to sum
	popq %rbx		# Restore callee-saved register

return:
	ret

# The stack starts here and grows to lower addresses
	.pos 0x200		
stack:	 

